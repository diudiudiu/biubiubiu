http 与 https

TCP协议三次握手
发送端首先发送一个带SYN标志的的数据包，
接收端收到后传回一个带有SYN/ACK标志的数据包以示传达确认信息。
最后发送端再传回再传回一个ACK标志的数据包，代表握手结束。

HTTP请求报文 
报文首部{
  请求行：方法（GET,POST...）、URI、HTTP版本，
  HTTP首部字段：请求首部字段（补充了请求附加内容、客户端信息、响应内容相关优先级等信息）、通用首部字段、实体首部字段，
  其它
}
空行（ CR + LF ）
报文主体

HTTP响应报文
报文首部{
  状态行：HTTP版本、状态码，
  HTTP首部字段：响应首部字段（补充了响应附加内容，也会要求客户端附加额外的内容信息）、通用首部字段、实体首部字段，
  其它
}
空行（ CR + LF ）
报文主体

一、HTTP/1.1 通用首部字段

  1.Cache-Control 缓存工作机制
  多个执行之间通过','分割

  缓存请求指令
  no-cache            强制先原服务器再次验证
  no-store            不缓存请求或响应的任何内容
  max-age = [秒]      响应的最大Age值
  max-stale( = [秒])  接收已过期的响应
  min-fresh = [秒]    期望在指定时间内的响应仍有效
  no-transform        代理不可更改媒体类型 防止缓存或代理压缩图片等操作
  only-if-cached      从缓存获取资源
  cache-extension     新指令标记（token）


  缓存响应指令
  public              可向任意方提供响应的缓存
  private             仅向特定用户返回响应
  no-cache            缓存前必须确定其有效性
  no-store            不缓存请求或响应的任何内容
  no-transform        代理不可更改媒体类型 防止缓存或代理压缩图片等操作
  must-revalidate     可缓存但必须再向源服务器进行确认
  proxy-revalidate    要求中间缓存服务器对缓存的响应有效性再进行验证
  max-age = [秒]      响应的最大Age值
  s-maxage = [秒]     公共缓存服务器响应的最大Age值
  cache-extension     新指令标记（token）

  使用 no-cache 指令的目的是为防止从缓存中返回过期资源
  客户端发送请求中如果包含 no-cache 指令，则表示客户端将不会接受缓存过的响应，中间的缓存服务器必须把客户端请求转发给源服务器
  如果服务器返回的响应中包含 no-cache 指令，那么缓存服务器不能对资源进行缓存。源服务器以后也将不再对缓存服务器请求提出资源有效性进行确认，切禁止其对响应资源进行缓存操作。
  若响应中对 no-cache 字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存，无参数值的首部字段可以使用缓存。
  只能在响应指令中指定该参数。

  当客户端发送请求包含 max-age 时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。如果值为0，那么缓存服务器通常需要将请求转发给源服务器。
  当服务器返回响应包含 max-age 时，缓存服务器将不对资源的有效性进行确认，而 max-age 数值代表资源保存为缓存的最长时间。（HTTP/1.1 缓存服务器会优先处理 max-age 指令而忽略 Expires 首部字段，HTTP/1.0正相反）

  s-maxage 功能和 max-age 相同，不同点在于 s-maxage 只适用于供多位用户使用的公共缓存服务器（一般指代理）。对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。当使用 s-maxage 后，直接忽略对 Expires 首部字段及 max-age 指令的处理。

  max-stale 如果指令未指定数值，那么无论经过多久，客户端都会接受响应，如果指令指定具体数值，那么即使过期，只要仍处于数值范围内，仍旧被客户端接收。

  only-if-cached 要求缓存服务器不重新加载响应，也不会再次确认资源有效性。若发生请求缓存服务器的本地缓存无响应，则返回状态码 504 Gateway Timeout。

  must-revalidate 代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。若代理无法连通源服务器再次获取有效资源的话，缓存必须给客户端返回状态码 504 Gateway Timeout。
  must-revalidate 会忽略请求的 max-stale。

  cache-extension可以扩展 Cache-Control 首部字段内的指令。
  如：Cache-Control：community="UCI" 
  如果缓存服务器不能理解 community 这个指令就会忽略，
  extension tokens 仅对能理解它的缓存服务器来说是有意义的。

  2.Connection 管理不再转发给代理的首部字段；管理持久连接
  Connection：不再转发首部字段名 or close(关闭连接) or keep-alive(持久连接)

  3.Date  报文创建的日期和时间
  Date: Tue, 02 Jul 2019 09:36:14 GMT

  4.Pragma 要求所有的中间服务器不返回缓存的资源
  只在请求中,一般与 Cache-Control: no-cache 连用，防止中间服务器HTTP协议版本不是HTTP/1.1
  Cache-Control: no-cache
  Pragma: no-cache

  5.Trailer
  事先说明报文主体后记录了哪些首部字段，可用在分块传输编码。

  6.Transfer-Encoding
  规定了传输报文主体时采用的编码方式，仅对分块传输编码有效。

  7.Upgrade
  用于检测HTTP协议及其他协议是否可使用更高版本进行通信，其参数值可以用来指定一个完全不同的通信协议。
  Upgrade首部字段产生作用的Upgrade对象仅限于客户端和邻接服务器之间。使用Upgrade首部字段，还需要额外指定Connection:Upgrade。
  对于Upgrade首部字段的请求，服务器可用 101 Swithching Protocols 状态码作为相应返回

  8.Via
  追踪客户端与服务器之间的请求和响应报文的传输路径。

  9.Warning 通常会告知用户一些与缓存相关的问题警告。
  Warning: [警告码] [警告的主机：端口号] "[警告内容]" ([时间日期])

  警告码
  110     响应已过期，代理返回已过期的资源
  111     再次验证失败，代理再验证资源有效性时失败（服务器无法到达等原因）
  112     断开连接，代理与互联网连接被故意切断
  113     试探性过期，响应的使用期超过240小时（有效缓存设定时间超过24小时情况下）
  199     杂项警告，任意警告内容
  214     使用了转换，代理对内容编码或媒体类型等执行了某些处理时
  299     持久杂项警告，任意警告内容

二、请求首部字段

  1.Accept 通知服务器，用户代理能够处理的媒体类型以及媒体类型相对优先级。
  优先级用q=来额外标注 0~1（精确小数点后三位） 1最大 默认为1。

  2.Accept-Charset 通知服务器用户代理支持的字符集及字符集相对优先级。权重用法与 Accept 相同。
  用于内容协商机制的服务器驱动协商。
  
  3.Accept-Encoding 通知服务器用户代理支持的内容编码及内容编码相对优先级。权重用法与 Accept 相同。也可使用 * 表示任意编码都可。

  4.



一个服务器，同事托管多个域名：
在相同的IP地址下，由于虚拟主机可以寄存多个不同主机名和域名的Web网站，因此在发送HTTP请求时，必须在Host首部内完整指定的主机名或域名URI。



状态码类别
1XX   信息性状态码          接受的请求正在处理
2XX   成功状态码            请求正常处理完毕
3XX   重定向状态码          需要进行附加操作以完成请求
4XX   客户端错误状态码      服务器无法处理请求
5XX   服务器错误状态码      服务器处理请求出错

常用状态码 
200 OK
请求正常处理
204 No Content
请求成功 但没有资源返回
206 Partial Content
范围请求,而服务器成功执行这部分GET请求。响应报文中包含了由Content-Range指定范围的实体内容。
对于多重范围的范围请求，响应会在首部字段Content-Type标明multipart/byteranges后返回响应报文。
如果客户端无法响应范围请求，则会返回状态码 200 OK 和完整的实体内容
301 Moved Permanently
永久性重定向
302 Found（禁止POST变为GET 但是并没人遵守）
临时性重定向
303 See Other
与302 Found 功能相同 但是需要用GET方法获取资源
304 Not Modified
资源已找到，但未符合条件请求。
307 Temporary Redirect
临时重定向，不会把POST改为GET
400 BadRequest
请求报文语法错误
401 Unauthorized
发送的请求需要有通过HTTP认证的认证信息，若之前请求过1次，则表示用户认证失败，返回的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用以质询用户信息。
403 Forbidden
请求资源的访问被服务器拒绝了
404 Not Found
服务器没有请求的资源
500 Internal Server Error
服务器在执行请求时发生了错误
503 Service Unavailable
服务器正处于超负载或正在进行停机维护，如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端

使用代理服务器理由：
利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制。



HTTP 为什么不安全？
通信使用明文（不加密），内容可能被窃听。
不验证通信方的身份，因此有可能遭遇伪装。
无法证明报文的完整性，所以有可能已遭篡改。


HTTPS就是在常规的TCP协议层之上加入了一层TLS或者SSL协议。所以其端口也不是常规的HTTP的80端口，变成了443端口

http与https的区别

1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。
2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。
3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。
5、http速度较为迅速，https加密通信会消耗更多的CPU及内存资源。
